// <![CDATA[//  ############################################################################//  #                                                                          #//  #              WOOPS - Web Object Oriented Programming System              #//  #                                                                          #//  #                             COPYRIGHT NOTICE                             #//  #                                                                          #//  # Copyright (C) 2009 Jean-David Gadina (macmade@eosgarden.com)             #//  # All rights reserved                                                      #//  ############################################################################// $Id: woops.js 434 2009-02-24 15:19:13Z macmade $package{    // Imports of the necessary ActionScript classes    import flash.display.MovieClip;    import fl.events.*;    import flash.events.*;    import flash.net.NetConnection;    import flash.net.Responder;    import flash.net.ObjectEncoding;    import flash.display.LoaderInfo;        /**     * AMF test document class     *      * @author      Jean-David Gadina <macmade@eosgarden.com>     * @version     1.0     */    public class AmfTestDocument extends MovieClip    {        /**         * The AMF server URL         */        private var _url:String               = '';                /**         * The NetConnection object for the AMF connection         */        private var _connection:NetConnection = null;                /**         * The Responder object for the AMF connection         */        private var _responder:Responder      = null;                /**         * Class constructor         *          * @return  void         */        public function AmfTestDocument()        {            // Adds the event listener for the AMF send button            this.amfSend.addEventListener( MouseEvent.CLICK, _send );                        // Creates the necessary objects            this._responder  = new Responder( _onResult, _onStatus );            this._connection = new NetConnection();                        // Stores the AMF server URL            this._url        = this.loaderInfo.parameters.amfTestUrl;        }                /**         * Sends the AMF test query         *          * @param   MouseEvent  The mouse event object         * @return  void         */        private function _send( e:MouseEvent ):void        {            // Checks the selected AMF version            if( this.amfVersion.selectedItem.data == 3 ) {                                // AMF 3                this._connection.objectEncoding = ObjectEncoding.AMF3;                            } else {                                // AMF 0                this._connection.objectEncoding = ObjectEncoding.AMF0;            }                        // Establish the AMF connection            this._connection.connect( this._url );                        // Creates some test data            var object = new Object();            object.foo = 'Hello World';            object.bar = new Array( 27, true );            object.ref = object.bar;                        // Adds an AMF test header            this._connection.addHeader( 'Foo', false, object );                        // Calls a remote method            this._connection.call( 'Bar', this._responder, 'Hello Universe!' );        }                /**         * Handles AMF responses         *          * @param   Object  The AMF response object         * @return  void         */        private function _onResult( result:Object ):void        {            this.amfResponse.text = result.toString();        }                /**         * Handles AMF errors         *          * @param   Object  The status object         * @return  void         */        private function _onStatus( status:Object ):void        {            this.amfResponse.text = String( 'Error type ' + status.code + ': ' + status.message );        }    }}