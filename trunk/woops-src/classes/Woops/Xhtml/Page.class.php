<?php
################################################################################
#                                                                              #
#                WOOPS - Web Object Oriented Programming System                #
#                                                                              #
#                               COPYRIGHT NOTICE                               #
#                                                                              #
# Copyright (C) 2009 Jean-David Gadina (macmade@eosgarden.com)                 #
# All rights reserved                                                          #
################################################################################

# $Id$

/**
 * XHTML page class
 *
 * @author      Jean-David Gadina <macmade@eosgarden.com>
 * @version     1.0
 * @package     Woops.Xhtml
 */
class Woops_Xhtml_Page
{
    /**
     * The minimum version of PHP required to run this class (checked by the WOOPS class manager)
     */
    const PHP_COMPATIBLE = '5.2.0';
    
    /**
     * Wether the static variables are set or not
     */
    private static $_hasStatic = false;
    
    /**
     * The string utilities
     */
    protected static $_str     = NULL;
    
    /**
     * The XHTML page object
     */
    protected $_xhtml          = NULL;
    
    /**
     * The XHTML page head tag
     */
    protected $_head           = NULL;
    
    /**
     * The XHTML page body tag
     */
    protected $_body           = NULL;
    
    /**
     * The name of the language to use
     */
    protected $_language       = 'en';
    
    /**
     * The character set to use
     */
    protected $_charset        = 'utf-8';
    
    /**
     * The XHTML namespace
     */
    protected $_xmlns          = 'http://www.w3.org/1999/xhtml';
    
    /**
     * The document type to use
     */
    protected $_dtd            = 'xhtml1-strict';
    
    /**
     * The available XHTML document types
     */
    protected $_docTypes       = array(
        'xhtml11'             => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
        'xhtml1-strict'       => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
        'xhtml1-transitional' => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
        'xhtml1-frameset'     => '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">'
    );
    
    /**
     * Wheter to insert the document types
     */
    protected $_docType        = true;
    
    /**
     * Wheter to insert the XML declaration
     */
    protected $_xmlDeclaration = true;
    
    /**
     * The XHTML head parts
     */
    protected $_headerParts    = array(
        'title'     => NULL,
        'meta-http' => array(),
        'meta-name' => array(),
        'base'      => NULL,
        'link'      => array(),
        'style'     => array(),
        'script'    => array()
    );
    
    /**
     * The header comments
     */
    protected $_headerComments = array();
    
    /**
     * Class constructor
     * 
     * The class constructor is private to avoid multiple instances of the
     * class (singleton).
     * 
     * @return  void
     */
    public function __construct()
    {
        // Checks if the static variables are set
        if( !self::$_hasStatic ) {
            
            // Sets the static variables
            self::_setStaticVars();
        }
        
        $this->_xhtml    = new Woops_Xhtml_Tag( 'html' );
        
        $this->_head     = $this->_xhtml->head;
        $this->_body     = $this->_xhtml->body;
        
        $this->_xhtml[ 'xmlns' ]    = $this->_xmlns;
        $this->_xhtml[ 'xml:lang' ] = $this->_language;
        $this->_xhtml[ 'lang' ]     = $this->_language;
        
        $this->addMetaHttp( 'content-type', 'text/html; charset=' . $this->_charset );
        $this->setLanguage( $this->_language );
        
        $this->addMetaName( 'generator', 'WOOPS - Web Object Oriented Programming System' );
        
        $this->addHeaderComment(
            'This page has been generated by WOOPS - Web Object Oriented Programming System'
            . self::$_str->NL
            . 'Copyright (C) 2009 Jean-David Gadina (macmade@eosgarden.com)'
            . self::$_str->NL
            . 'All rights reserved'
        );
    }
    
    /**
     * 
     */
    public function __toString()
    {
        $out = '';
        
        $this->_head->removeAllTags();
        
        foreach( $this->_headerComments as $comment ) {
            
            $this->_head->comment( $comment );
        }
        
        foreach( $this->_headerParts as $headPart ) {
            
            if( is_array( $headPart ) ) {
                
                foreach( $headPart as $headPartGroup ) {
                    
                    $this->_head->addChildNode( $headPartGroup );
                }
                
            } elseif( is_object( $headPart ) ) {
                
                $this->_head->addChildNode( $headPart );
            }
        }
        
        if( $this->_xmlDeclaration ) {
            
            $out .= '<?xml version="1.0" encoding="' . $this->_charset . '"?>' . self::$_str->NL;
        }
        
        if( $this->_docType ) {
            
            $out .= $this->_docTypes[ $this->_dtd ] . self::$_str->NL;
        }
        
        $out .= ( string )$this->_xhtml;
        
        return $out;
    }
    
    /**
     * Sets the needed static variables
     * 
     * @return  void
     */
    private static function _setStaticVars()
    {
        // Gets the instance of the string utilities
        self::$_str       = Woops_String_Utils::getInstance();
        
        // Static variables are set
        self::$_hasStatic = true;
    }
    
    /**
     * 
     */
    public function insertXmlDeclaration( $value )
    {
        $this->_xmlDeclaration = ( boolean )$value;
    }
    
    /**
     * 
     */
    public function insertDocType( $value )
    {
        $this->_docType = ( boolean )$value;
    }
    
    /**
     * 
     */
    public function setDocType( $name )
    {
        $name = strtolower( $name );
        
        if( isset( $this->_docTypes[ $name ] ) ) {
            
            $this->_dtd = $name;
        }
    }
    
    /**
     * 
     */
    public function setCharset( $charset )
    {
        $this->_charset     = strtolower( $charset );
        $cType              = $this->_headerParts[ 'meta-http' ][ 'content-type' ];
        $cType[ 'content' ] = 'text/html; charset=' . $charset;
    }
    
    /**
     * 
     */
    public function setTitle( $title )
    {
        $this->_headerParts[ 'title' ] = new Woops_Xhtml_Tag( 'title' );
        $this->_headerParts[ 'title' ]->addTextData( ( string )$title );
    }
    
    /**
     * 
     */
    public function setLanguage( $name )
    {
        $this->_language            = ( string )$name;
        $this->_xhtml[ 'xml:lang' ] = $this->_language;
        $this->_xhtml[ 'lang' ]     = $this->_language;
        $this->addMetaHttp( 'content-language', $this->_language );
        $this->addMetaName( 'DC.Language', $this->_language, 'NISOZ39.50' );
    }
    
    /**
     * 
     */
    public function setBase( $href, $target = '' )
    {
        $this->_headerParts[ 'base' ]           = new Woops_Xhtml_Tag( 'title' );
        $this->_headerParts[ 'base' ][ 'href' ] = ( string )$href;
        
        if( $target ) {
            
            $this->_headerParts[ 'base' ][ 'target' ] = ( string )$target;
            
        } else {
            
            unset( $this->_headerParts[ 'base' ][ 'target' ][ 'href' ] );
        }
    }
    
    /**
     * 
     */
    public function addMetaName( $name, $content, $scheme = '' )
    {
        if( $name !== 'generator' ) {
            
            if( !isset( $this->_headerParts[ 'meta-name' ][ $name ] ) ) {
                
                $this->_headerParts[ 'meta-name' ][ $name ] = new Woops_Xhtml_Tag( 'meta' );
            }
            
            $this->_headerParts[ 'meta-name' ][ $name ][ 'name'    ] = (string)$name;
            $this->_headerParts[ 'meta-name' ][ $name ][ 'content' ] = (string)$content;
            
            if( $scheme ) {
                
                $this->_headerParts[ 'meta-name' ][ $name ][ 'scheme' ] = (string)$scheme;
                
            } else {
                
                unset( $this->_headerParts[ 'meta-name' ][ $name ][ 'scheme' ] );
            }
        }
    }
    
    /**
     * 
     */
    public function addMetaHttp( $httpEquiv, $content, $scheme = '' )
    {
        if( $httpEquiv !== 'content-type' || $httpEquiv !== 'content-language' ) {
            
            if( !isset( $this->_headerParts[ 'meta-http' ][ $httpEquiv ] ) ) {
                
                $this->_headerParts[ 'meta-http' ][ $httpEquiv ] = new Woops_Xhtml_Tag( 'meta' );
            }
            
            $this->_headerParts[ 'meta-http' ][ $httpEquiv ][ 'http-equiv' ] = (string)$httpEquiv;
            $this->_headerParts[ 'meta-http' ][ $httpEquiv ][ 'content' ]    = (string)$content;
            
            if( $scheme ) {
                
                $this->_headerParts[ 'meta-http' ][ $httpEquiv ][ 'scheme' ] = (string)$scheme;
                
            } else {
                
                unset( $this->_headerParts[ 'meta-http' ][ $httpEquiv ][ 'scheme' ] );
            }
        }
    }
    
    /**
     * 
     */
    public function addLink( $href = '', $type = '', $title = '', $rel = '', $rev = '', $media = '', $charset = '', $hreflang = '', $target = '' )
    {
        $link = new Woops_Xhtml_Tag( 'link' );
        
        if( $href ) {
            
            $link[ 'href' ] = ( string )$href;
        }
        
        if( $type ) {
            
            $link[ 'type' ] = ( string )$type;
        }
        
        if( $title ) {
            
            $link[ 'title' ] = ( string )$title;
        }
        
        if( $rel ) {
            
            $link[ 'rel' ] = ( string )$rel;
        }
        
        if( $rev ) {
            
            $link[ 'rev' ] = ( string )$rev;
        }
        
        if( $media ) {
            
            $link[ 'media' ] = ( string )$media;
        }
        
        if( $charset ) {
            
            $link[ 'charset' ] = ( string )$charset;
        }
        
        if( $hreflang ) {
            
            $link[ 'hreflang' ] = ( string )$hreflang;
        }
        
        if( $target ) {
            
            $link[ 'target' ] = ( string )$target;
        }
        
        $this->_headerParts[ 'link' ][] = $link;
    }
    
    /**
     * 
     */
    public function addStylesheet( $href, $media = 'screen' )
    {
        $this->addLink(
            $href,
            'text/css',
            '',
            'stylesheet',
            '',
            $media
        );
    }
    
    /**
     * 
     */
    public function addRssLink( $href, $title )
    {
        $this->addLink(
            $href,
            'application/rss+xml',
            $title,
            'alternate'
        );
    }
    
    /**
     * 
     */
    public function addAtomLink( $href, $title )
    {
        $this->addLink(
            $href,
            'application/atom+xml',
            $title,
            'alternate'
        );
    }
    
    /**
     * 
     */
    public function addFavicon( $href = 'favicon.ico' )
    {
        $this->addLink(
            $href,
            '',
            '',
            'shortcut icon'
        );
    }
    
    /**
     * 
     */
    public function addScriptSource( $source, $type, $defer = false, $charset = '' )
    {
        $script = new Woops_Xhtml_Tag( 'script' );
        
        $script[ 'src' ]  = $source;
        $script[ 'type' ] = $type;
        
        if( $defer ) {
            
            $script[ 'defer' ] = 'defer';
        }
        
        if( $charset ) {
            
            $script[ 'charset' ] = ( string )$charset;
        }
        
        $this->_headerParts[ 'script' ][] = $script;
    }
    
    /**
     * 
     */
    public function addJavaScriptSource( $source, $defer = false, $charset = '' )
    {
        $this->addScriptSource(
            $source,
            'text/javascript',
            $defer,
            $charset
        );
    }
    
    /**
     * 
     */
    public function addScriptContent( $content, $type, $defer = false )
    {
        $script = new Woops_Xhtml_Tag( 'script' );
        
        $script[ 'src' ]  = $source;
        $script[ 'type' ] = $type;
        
        if( $defer ) {
            
            $script[ 'defer' ] = 'defer';
        }
        
        $script->addTextData( ( string )$content );
        
        $this->_headerParts[ 'script' ][] = $script;
    }
    
    /**
     * 
     */
    public function addJavaScriptContent( $content, $defer = false )
    {
        $this->addScriptContent(
            $source,
            'text/javascript',
            $defer
        );
    }
    
    /**
     * 
     */
    public function addStyle( $content, $media = 'screen', $type = 'text/css' )
    {
        $style = new Woops_Xhtml_Tag( 'script' );
        
        if( $media ) {
            
            $style[ 'media' ] = $media;
        }
        
        if( $type ) {
            
            $style[ 'type' ] = $type;
        }
        
        $style->addTextData( ( string )$content );
        
        $this->_headerParts[ 'style' ][] = $style;
    }
    
    /**
     * 
     */
    public function addHeaderComment( $text )
    {
        $this->_headerComments[] = $text;
    }
    
    /**
     * 
     */
    public function addHeadNode( Woops_Xhtml_Tag $node )
    {
        $tagName = $node->getTagName();
        
        switch( $tagName ) {
            
            case 'title':
                
                $this->_headerParts[ 'title' ] = $node;
                break;
            
            case 'meta':
                
                if( isset( $node[ 'http-equiv' ] ) ) {
                    
                    $this->_headerParts[ 'meta-http' ][] = $node;
                    
                } elseif( isset( $node[ 'name' ] ) ) {
                    
                    $this->_headerParts[ 'meta-name' ][] = $node;
                }
                break;
            
            case 'base':
                
                $this->_headerParts[ 'base' ] = $node;
                break;
            
            case 'link':
                
                $this->_headerParts[ 'link' ][] = $node;
                break;
            
            case 'style':
                
                $this->_headerParts[ 'style' ][] = $node;
                break;
            
            case 'script':
                
                $this->_headerParts[ 'script' ][] = $node;
                break;
        }
    }
    
    /**
     * 
     */
    public function getBody()
    {
        return $this->_body;
    }
    
    /**
     * 
     */
    public function addBodyAttribute( $parameter, $value )
    {
        $this->_body[ $parameter ] = $value;
    }
}
